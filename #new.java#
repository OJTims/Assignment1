public WordSalad[] split(int k) {
    -        //get initial length and array size needed to store split WordSalad
        -        double length = count();
    -        int arraySize = arraySize(length, k);
    -        WordSalad[] split = new WordSalad[arraySize];
    -        WordSalad temp = new WordSalad();
    -        //index for entering into array
        -        int index = 0;
    -        //while there are still items in the current WordSalad
        -        while (length > 0) {
        -            //set current to first
            -            WordNode curr = this.first;
        -            //get number of words for this part of split
            -            int numberOfWords = (int)Math.ceil(length / k); // TODO explain length / k up top
        -
            -            for (int i = 0; i < numberOfWords; i++) {
            -                //add the current word to the temporary WordSalad
                -                //then remove the node from the this WordSalad
                -                //and jump forward k spots to the next node
                -                //needed for this split
                -                temp.addLast(curr.word);
            -                remove(curr);
            -                curr = jumpForward(curr, k);
            -            }
        -            //update the length of this WordSalad
            -            length = count();
        -            //add the temporary WordSalad to the array
            -            //and create a new one for the next iteration
            -            split[index++] = temp;
        -            temp = new WordSalad();
        -        }
    -        return split;
    -    }